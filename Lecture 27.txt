https://www.youtube.com/watch?v=qH6yxkw0u78&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&index=25

->Lecture 27: Data structures: Binary Search Tree

->quick for search and update (0:15)
->Store any type, quick search, modify
  ->array/link list (1:03)
  ->array
    ->search(x)
      -O(n)
     ->Insert
      -O(1)
      -If the array has the available space (2:59)
      -If the array is full, we create a larger array (3:09) like the twice
      size of the filled array (3:12)
      -Then we will copy it the content of old to the new array
      -Copy operation will take a big O(n) (3:22)(3:35)
     ->Delete(1)
        -Shift element to the left
        -Worst case O(n) (2:52)
   ->Link List (3:44)
    -Search
      -O(n) (3:56)
    -Insert
      -O(1) in head
      -O(n) in tail (4:15)
     -Remove
      -O(n)
        -since we need to traverse the whole list and search the record
        in worst cast(4:32)
->For the search operation, n comparions is the worst case
  -Let's say cost of 1 comparions=10^(-6)
  -For n=10^(8)=1 million length of data,T=100 seconds
  -May not be reasonalbe since search is a common operation (5:54)
->If we can perform binary search in a sorted array. It is O[log(n)] (6:09)
->Different data type has different method for data structre (6:39)
->The data structre has to be in an array and must be sorted (6:51)
->If I want want to insert(5) in the sorted araay for binary search (7:17)
  -array   2,4,6,9,11,15
  -index  0,1,2,3,4 ,5
 ->We can find the postion in order of log n times using binary search (7:20)
 -We can find the 1st binary search to see if the 1st element is > 5 first(7:27)
 -Then we need to shift the location at index 2 (7:36)
 -so whole thing will be shift to the right (7:40)
 -then I can insert 5 (7:44)
    -New array   2,4,5,6,9,11,15
         -index  0,1,2,3,4 ,5,6
